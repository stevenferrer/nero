// Code generated by nero, DO NOT EDIT.
package playerrepo

import (
	"github.com/stevenferrer/nero/aggregate"
)

// Avg is the average aggregate operator
func Avg(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.Avg,
			})
		}
		return aggregates
	}
}

// Count is the count aggregate operator
func Count(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.Count,
			})
		}
		return aggregates
	}
}

// Max is the max aggregate operator
func Max(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.Max,
			})
		}
		return aggregates
	}
}

// Min is the min aggregate operator
func Min(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.Min,
			})
		}
		return aggregates
	}
}

// Sum is the sum aggregate operator
func Sum(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.Sum,
			})
		}
		return aggregates
	}
}

// None is the none aggregate operator
func None(fields ...Field) aggregate.Func {
	return func(aggregates aggregate.Aggregates) aggregate.Aggregates {
		for _, field := range fields {
			aggregates = append(aggregates, aggregate.Aggregate{
				Field:    field.String(),
				Operator: aggregate.None,
			})
		}
		return aggregates
	}
}
